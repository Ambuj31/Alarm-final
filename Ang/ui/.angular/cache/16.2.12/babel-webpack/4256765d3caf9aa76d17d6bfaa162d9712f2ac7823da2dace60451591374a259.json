{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n//   constructor(private AlarmService: AlarmService) {}\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component } from '@angular/core';\nlet AlarmComponent = class AlarmComponent {\n  constructor(AlarmService) {\n    this.AlarmService = AlarmService;\n    this.alarms = []; // Initialize with an empty array\n    this.selectedAlarm = null; // Initialize selectedAlarm as null\n    this.showEditForm = false;\n    this.isDeleteConfirmationOpen = false;\n    this.showFilterOptions = false;\n    this.selectedPriority = '';\n  }\n  ngOnInit() {\n    this.loadAlarms();\n  }\n  loadAlarms() {\n    this.AlarmService.getAlarms().subscribe(alarms => {\n      this.alarms = alarms;\n      console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n    }, error => {\n      console.error('Error loading alarms:', error);\n    });\n  }\n  editAlarm(alarm) {\n    this.selectedAlarm = alarm;\n    this.showEditForm = false; // Close edit form when selecting a new alarm\n  }\n\n  toggleEditForm() {\n    this.showEditForm = !this.showEditForm;\n  }\n  submitEditForm() {\n    if (this.selectedAlarm) {\n      const scrollPosition = window.pageYOffset;\n      this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(updatedAlarm => {\n        const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n        if (index !== -1) {\n          this.alarms[index] = updatedAlarm;\n        }\n        console.log('Alarm updated successfully');\n        this.selectedAlarm = null;\n        this.showEditForm = false;\n        window.scrollTo(0, scrollPosition); // Maintain scroll position\n      }, error => {\n        console.error('Error updating alarm:', error);\n      });\n    }\n  }\n  cancelEdit() {\n    this.selectedAlarm = null;\n    this.showEditForm = false;\n  }\n  openDeleteConfirmation(alarm) {\n    this.selectedAlarmForDelete = alarm;\n    this.isDeleteConfirmationOpen = true; // Set isDeleteConfirmationOpen to true when opening the modal\n  }\n\n  closeDeleteConfirmation() {\n    this.isDeleteConfirmationOpen = false;\n  }\n  // deleteAlarm(id: number): void {\n  //   // if (confirm('Are you sure you want to delete this alarm?')) {\n  //     this.AlarmService.deleteAlarm(id).subscribe(() => {\n  //       // Remove the deleted alarm from the local array\n  //       this.alarms = this.alarms.filter(a => a.id !== id);\n  //       console.log('Alarm deleted successfully');\n  //     }, error => {\n  //       console.error('Error deleting alarm:', error);\n  //       // Optionally, display an error message to the user\n  //     });\n  // }\n  deleteAlarm(id) {\n    // Call the deleteAlarm method of your AlarmService\n    this.AlarmService.deleteAlarm(id).subscribe(() => {\n      // Remove the deleted alarm from the local array\n      this.alarms = this.alarms.filter(a => a.id !== id);\n      console.log('Alarm deleted successfully');\n      // Close the delete confirmation modal\n      this.isDeleteConfirmationOpen = false;\n      this.selectedAlarmForDelete = null;\n    }, error => {\n      console.error('Error deleting alarm:', error);\n      // Optionally, display an error message to the user\n    });\n  }\n\n  toggleFilterOptions() {\n    this.showFilterOptions = !this.showFilterOptions;\n  }\n  filterByPriority() {\n    if (this.selectedPriority) {\n      this.alarms = this.alarms.filter(alarm => alarm.priority === this.selectedPriority);\n    } else {\n      // If no priority is selected, reset the alarms array to show all alarms\n      this.loadAlarms();\n    }\n  }\n};\nAlarmComponent = __decorate([Component({\n  selector: 'app-read',\n  templateUrl: './read.component.html',\n  styleUrls: ['./read.component.css']\n})], AlarmComponent);\nexport { AlarmComponent };","map":{"version":3,"names":["Component","AlarmComponent","constructor","AlarmService","alarms","selectedAlarm","showEditForm","isDeleteConfirmationOpen","showFilterOptions","selectedPriority","ngOnInit","loadAlarms","getAlarms","subscribe","console","log","error","editAlarm","alarm","toggleEditForm","submitEditForm","scrollPosition","window","pageYOffset","updateAlarm","updatedAlarm","index","findIndex","a","id","scrollTo","cancelEdit","openDeleteConfirmation","selectedAlarmForDelete","closeDeleteConfirmation","deleteAlarm","filter","toggleFilterOptions","filterByPriority","priority","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\AMBUJ\\AMBUJ\\COLLEGE\\GG\\alarm-demo-main\\Ang\\ui\\src\\app\\read\\read.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\n\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n\n//   constructor(private AlarmService: AlarmService) {}\n\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component, OnInit } from '@angular/core';\nimport { Alarm } from '../app.model';\nimport { AlarmService } from '../data.service';\n\n@Component({\n  selector: 'app-read',\n  templateUrl: './read.component.html',\n  styleUrls: ['./read.component.css']\n})\nexport class AlarmComponent  implements OnInit {\n  alarms: Alarm[] = []; // Initialize with an empty array\n  selectedAlarm: Alarm | null = null; // Initialize selectedAlarm as null\n  showEditForm = false;\n  isDeleteConfirmationOpen: boolean = false;\n  selectedAlarmForDelete: any;\n  showFilterOptions: boolean = false;\n  selectedPriority: string = '';\n  constructor(private AlarmService: AlarmService) { }\n\n  ngOnInit(): void {\n    this.loadAlarms();\n  }\n\n  loadAlarms(): void {\n    this.AlarmService.getAlarms().subscribe(\n      (alarms: Alarm[]) => {\n        this.alarms = alarms;\n        console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n      },\n      (error) => {\n        console.error('Error loading alarms:', error);\n      }\n    );\n  }\n  \n\n  editAlarm(alarm: Alarm): void {\n    this.selectedAlarm = alarm;\n    this.showEditForm = false; // Close edit form when selecting a new alarm\n  }\n\n  toggleEditForm(): void {\n    this.showEditForm = !this.showEditForm;\n  }\n\n  submitEditForm(): void {\n    if (this.selectedAlarm) {\n      const scrollPosition = window.pageYOffset;\n      this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(\n        (updatedAlarm: Alarm) => {\n          const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n          if (index !== -1) {\n            this.alarms[index] = updatedAlarm;\n          }\n          console.log('Alarm updated successfully');\n          this.selectedAlarm = null;\n          this.showEditForm = false;\n          window.scrollTo(0, scrollPosition); // Maintain scroll position\n        },\n        (error) => {\n          console.error('Error updating alarm:', error);\n        }\n      );\n    }\n  }\n  \n\n  cancelEdit(): void {\n    this.selectedAlarm = null;\n    this.showEditForm = false;\n  }\n\n  openDeleteConfirmation(alarm: any): void {\n    this.selectedAlarmForDelete = alarm;\n    this.isDeleteConfirmationOpen = true; // Set isDeleteConfirmationOpen to true when opening the modal\n  }\n\ncloseDeleteConfirmation(): void {\n  this.isDeleteConfirmationOpen = false;\n}\n  // deleteAlarm(id: number): void {\n  //   // if (confirm('Are you sure you want to delete this alarm?')) {\n  //     this.AlarmService.deleteAlarm(id).subscribe(() => {\n  //       // Remove the deleted alarm from the local array\n  //       this.alarms = this.alarms.filter(a => a.id !== id);\n  //       console.log('Alarm deleted successfully');\n  //     }, error => {\n  //       console.error('Error deleting alarm:', error);\n  //       // Optionally, display an error message to the user\n  //     });\n    \n  // }\n  deleteAlarm(id: number): void {\n  // Call the deleteAlarm method of your AlarmService\n  this.AlarmService.deleteAlarm(id).subscribe(\n    () => {\n      // Remove the deleted alarm from the local array\n      this.alarms = this.alarms.filter(a => a.id !== id);\n      console.log('Alarm deleted successfully');\n      // Close the delete confirmation modal\n      this.isDeleteConfirmationOpen = false;\n      this.selectedAlarmForDelete = null;\n    },\n    error => {\n      console.error('Error deleting alarm:', error);\n      // Optionally, display an error message to the user\n    }\n  );\n}\ntoggleFilterOptions(): void {\n    this.showFilterOptions = !this.showFilterOptions;\n  }\n\n  filterByPriority(): void {\n    if (this.selectedPriority) {\n      this.alarms = this.alarms.filter(alarm => alarm.priority === this.selectedPriority);\n    } else {\n      // If no priority is selected, reset the alarms array to show all alarms\n      this.loadAlarms();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}