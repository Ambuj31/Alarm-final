{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n//   constructor(private AlarmService: AlarmService) {}\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component } from '@angular/core';\nlet AlarmComponent = class AlarmComponent {\n  constructor(AlarmService) {\n    this.AlarmService = AlarmService;\n    this.alarms = []; // Initialize with an empty array\n    this.selectedAlarm = null; // Initialize selectedAlarm as null\n    this.originalAlarm = null; // Store the original state of the selected alarm\n    this.showEditForm = false;\n    this.isDeleteConfirmationOpen = false;\n    this.showFilterOptions = false;\n    this.selectedPriority = '';\n    this.originalAlarms = []; // Store the original list of alarms\n    this.hoveredAlarm = null;\n    this.priorities = ['All', 'P1', 'P2', 'P3']; // List of priorities including \"All\"\n  }\n\n  ngOnInit() {\n    this.loadAlarms();\n  }\n  loadAlarms() {\n    this.AlarmService.getAlarms().subscribe(alarms => {\n      this.alarms = alarms;\n      this.originalAlarms = [...alarms]; // Store the original alarms\n      console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n    }, error => {\n      console.error('Error loading alarms:', error);\n    });\n  }\n  editAlarm(alarm) {\n    this.selectedAlarm = alarm;\n    // this.showEditForm = false; // Close edit form when selecting a new alarm\n    this.originalAlarm = {\n      ...alarm\n    };\n  }\n  onMouseEnter(alarm) {\n    this.hoveredAlarm = alarm;\n  }\n  onMouseLeave() {\n    this.hoveredAlarm = null;\n  }\n  toggleEditForm() {\n    this.showEditForm = !this.showEditForm;\n  }\n  submitEditForm() {\n    if (this.selectedAlarm) {\n      const scrollPosition = window.pageYOffset;\n      this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(updatedAlarm => {\n        const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n        if (index !== -1) {\n          this.alarms[index] = updatedAlarm;\n        }\n        console.log('Alarm updated successfully');\n        alert('RECORD UPDATED');\n        this.selectedAlarm = null;\n        this.showEditForm = false;\n        if (this.alarms.length > 0) {\n          this.selectedAlarm = this.alarms[0];\n        }\n        window.scrollTo(0, scrollPosition); // Maintain scroll position\n      }, error => {\n        console.error('Error updating alarm:', error);\n      });\n    }\n  }\n  // cancelEdit(): void {\n  //   // Check if any changes were made to the selected alarm\n  //   if (this.selectedAlarm && this.originalAlarm) {\n  //     const index = this.alarms.findIndex(a => a.id === this.selectedAlarm.id);\n  //     if (index !== -1) {\n  //       // If changes were made, revert back to the original state\n  //       this.alarms[index] = { ...this.originalAlarm };\n  //     }\n  //   }\n  //   this.selectedAlarm = null;\n  //   this.originalAlarm = null;\n  // }\n  cancelEdit() {\n    // Reset the original values of the selected alarm\n    if (this.selectedAlarm && this.originalAlarm) {\n      Object.assign(this.selectedAlarm, this.originalAlarm);\n    }\n    // Close the edit form\n    this.showEditForm = false;\n  }\n  openDeleteConfirmation(alarm) {\n    this.selectedAlarmForDelete = alarm;\n    this.isDeleteConfirmationOpen = true;\n  }\n  closeDeleteConfirmation() {\n    this.isDeleteConfirmationOpen = false;\n  }\n  deleteAlarm(id) {\n    this.isDeleteConfirmationOpen = true;\n    // Call the deleteAlarm method of your AlarmService\n    this.AlarmService.deleteAlarm(id).subscribe(() => {\n      // Remove the deleted alarm from the local array\n      this.alarms = this.alarms.filter(a => a.id !== id);\n      console.log('Alarm deleted successfully');\n      alert('RECORD DELETED');\n      // Close the delete confirmation modal\n      if (this.alarms.length > 0) {\n        this.selectedAlarm = this.alarms[0];\n      } else {\n        this.selectedAlarm = null;\n      }\n      this.closeDeleteConfirmation();\n    }, error => {\n      console.error('Error deleting alarm:', error);\n    });\n  }\n  toggleFilterOptions() {\n    this.showFilterOptions = !this.showFilterOptions;\n  }\n  // filterByPriority(): void {\n  //   if (this.selectedPriority) {\n  //     // Filter original alarms based on selected priority\n  //     this.alarms = this.originalAlarms.filter(alarm => alarm.priority === this.selectedPriority);\n  //   } else {\n  //     // Reset alarms to original list if no priority is selected\n  //     this.alarms = [...this.originalAlarms];\n  //   }\n  // }\n  filterByPriority() {\n    if (this.selectedPriority === 'All') {\n      this.alarms = [...this.originalAlarms]; // Show all alarms\n    } else {\n      // Filter original alarms based on selected priority\n      this.alarms = this.originalAlarms.filter(alarm => alarm.priority === this.selectedPriority);\n    }\n  }\n};\nAlarmComponent = __decorate([Component({\n  selector: 'app-read',\n  templateUrl: './read.component.html',\n  styleUrls: ['./read.component.css']\n})], AlarmComponent);\nexport { AlarmComponent };","map":{"version":3,"names":["Component","AlarmComponent","constructor","AlarmService","alarms","selectedAlarm","originalAlarm","showEditForm","isDeleteConfirmationOpen","showFilterOptions","selectedPriority","originalAlarms","hoveredAlarm","priorities","ngOnInit","loadAlarms","getAlarms","subscribe","console","log","error","editAlarm","alarm","onMouseEnter","onMouseLeave","toggleEditForm","submitEditForm","scrollPosition","window","pageYOffset","updateAlarm","updatedAlarm","index","findIndex","a","id","alert","length","scrollTo","cancelEdit","Object","assign","openDeleteConfirmation","selectedAlarmForDelete","closeDeleteConfirmation","deleteAlarm","filter","toggleFilterOptions","filterByPriority","priority","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\AMBUJ\\AMBUJ\\COLLEGE\\GG\\alarm-demo-main\\Ang\\ui\\src\\app\\read\\read.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\n\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n\n//   constructor(private AlarmService: AlarmService) {}\n\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component, OnInit  } from '@angular/core';\nimport { Alarm } from '../app.model';\nimport { AlarmService } from '../data.service';\n\n@Component({\n  selector: 'app-read',\n  templateUrl: './read.component.html',\n  styleUrls: ['./read.component.css']\n})\nexport class AlarmComponent  implements OnInit {\n  alarms: Alarm[] = []; // Initialize with an empty array\n  selectedAlarm: Alarm | null = null; // Initialize selectedAlarm as null\n  originalAlarm: Alarm | null = null; // Store the original state of the selected alarm\n  showEditForm = false;\n  isDeleteConfirmationOpen: boolean = false;\n  selectedAlarmForDelete: any;\n  showFilterOptions: boolean = false;\n  selectedPriority: string = '';\n  originalAlarms: Alarm[] = []; // Store the original list of alarms\n  hoveredAlarm: Alarm | null = null;\n  priorities: string[] = ['All', 'P1', 'P2', 'P3']; // List of priorities including \"All\"\n\n  constructor(private AlarmService: AlarmService) { }\n\n  ngOnInit(): void {\n    this.loadAlarms();\n  }\n\n  loadAlarms(): void {\n    this.AlarmService.getAlarms().subscribe(\n      (alarms: Alarm[]) => {\n        this.alarms = alarms;\n        this.originalAlarms = [...alarms]; // Store the original alarms\n        console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n      },\n      (error) => {\n        console.error('Error loading alarms:', error);\n      }\n    );\n  }\n  \n\n  editAlarm(alarm: Alarm): void {\n    this.selectedAlarm = alarm;\n    // this.showEditForm = false; // Close edit form when selecting a new alarm\n    this.originalAlarm = { ...alarm };\n  }\n  onMouseEnter(alarm: Alarm): void {\n    this.hoveredAlarm = alarm;\n  }\n\n  onMouseLeave(): void {\n    this.hoveredAlarm = null;\n  }\n\n  toggleEditForm(): void {\n    this.showEditForm = !this.showEditForm;\n  }\n\n  submitEditForm(): void {\n    if (this.selectedAlarm) {\n      const scrollPosition = window.pageYOffset;\n      this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(\n        (updatedAlarm: Alarm) => {\n          const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n          if (index !== -1) {\n            this.alarms[index] = updatedAlarm;\n          }\n          console.log('Alarm updated successfully');\n          alert('RECORD UPDATED');\n          this.selectedAlarm = null;\n          this.showEditForm = false;\n          if (this.alarms.length > 0) {\n            this.selectedAlarm = this.alarms[0];\n          }\n          window.scrollTo(0, scrollPosition); // Maintain scroll position\n        },\n        (error) => {\n          console.error('Error updating alarm:', error);\n        }\n      );\n    }\n  }\n  // cancelEdit(): void {\n  //   // Check if any changes were made to the selected alarm\n  //   if (this.selectedAlarm && this.originalAlarm) {\n  //     const index = this.alarms.findIndex(a => a.id === this.selectedAlarm.id);\n  //     if (index !== -1) {\n  //       // If changes were made, revert back to the original state\n  //       this.alarms[index] = { ...this.originalAlarm };\n  //     }\n  //   }\n  //   this.selectedAlarm = null;\n  //   this.originalAlarm = null;\n  // }\n  cancelEdit(): void {\n    // Reset the original values of the selected alarm\n    if (this.selectedAlarm && this.originalAlarm) {\n      Object.assign(this.selectedAlarm, this.originalAlarm);\n    }\n    // Close the edit form\n    this.showEditForm = false;\n  }\n  \n  \n\n\nopenDeleteConfirmation(alarm: any): void {\n  this.selectedAlarmForDelete = alarm;\n  this.isDeleteConfirmationOpen = true;\n\n}\n\ncloseDeleteConfirmation(): void {\n  this.isDeleteConfirmationOpen = false;\n \n}\n\n\ndeleteAlarm(id: number): void {\n  this.isDeleteConfirmationOpen = true;\n\n  // Call the deleteAlarm method of your AlarmService\n  this.AlarmService.deleteAlarm(id).subscribe(\n    () => {\n      // Remove the deleted alarm from the local array\n      this.alarms = this.alarms.filter(a => a.id !== id);\n      console.log('Alarm deleted successfully');\n      alert('RECORD DELETED');\n      // Close the delete confirmation modal\n      if (this.alarms.length > 0) {\n        this.selectedAlarm = this.alarms[0];\n      } else {\n        this.selectedAlarm = null;\n      }\n      this.closeDeleteConfirmation();\n   \n    },\n    error => {\n      console.error('Error deleting alarm:', error);\n\n    }\n  );\n}\n\n\n\ntoggleFilterOptions(): void {\n    this.showFilterOptions = !this.showFilterOptions;\n  }\n\n\n  // filterByPriority(): void {\n  //   if (this.selectedPriority) {\n  //     // Filter original alarms based on selected priority\n  //     this.alarms = this.originalAlarms.filter(alarm => alarm.priority === this.selectedPriority);\n  //   } else {\n  //     // Reset alarms to original list if no priority is selected\n  //     this.alarms = [...this.originalAlarms];\n  //   }\n  // }\n  filterByPriority(): void {\n    if (this.selectedPriority === 'All') {\n      this.alarms = [...this.originalAlarms]; // Show all alarms\n    } else {\n      // Filter original alarms based on selected priority\n      this.alarms = this.originalAlarms.filter(alarm => alarm.priority === this.selectedPriority);\n    }\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}