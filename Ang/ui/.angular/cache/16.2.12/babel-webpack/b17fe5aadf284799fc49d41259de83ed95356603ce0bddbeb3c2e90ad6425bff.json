{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n//   constructor(private AlarmService: AlarmService) {}\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\n// import { Component, OnInit  } from '@angular/core';\n// import { Alarm } from '../app.model';\n// import { AlarmService } from '../data.service';\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n// export class AlarmComponent  implements OnInit {\n//   alarms: Alarm[] = []; // Initialize with an empty array\n//   selectedAlarm: Alarm | null = null; // Initialize selectedAlarm as null\n//   originalAlarm: Alarm | null = null; // Store the original state of the selected alarm\n//   showEditForm = false;\n//   freezeBackground = false; \n//   isDeleteConfirmationOpen: boolean = false;\n//   selectedAlarmForDelete: any;\n//   showFilterOptions: boolean = false;\n//   selectedPriority: string = '';\n//   hoveredAlarm: Alarm | null = null;\n//   constructor(private AlarmService: AlarmService) { }\n//   ngOnInit(): void {\n//     this.loadAlarms();\n//   }\n//   loadAlarms(): void {\n//     this.AlarmService.getAlarms().subscribe(\n//       (alarms: Alarm[]) => {\n//         this.alarms = alarms;\n//         console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n//       },\n//       (error) => {\n//         console.error('Error loading alarms:', error);\n//       }\n//     );\n//   }\n//   editAlarm(alarm: Alarm): void {\n//     this.selectedAlarm = alarm;\n//     // this.showEditForm = false; // Close edit form when selecting a new alarm\n//     this.originalAlarm = { ...alarm };\n//   }\n//   onMouseEnter(alarm: Alarm): void {\n//     this.hoveredAlarm = alarm;\n//   }\n//   onMouseLeave(): void {\n//     this.hoveredAlarm = null;\n//   }\n//   toggleEditForm(): void {\n//     this.showEditForm = !this.showEditForm;\n//   }\n//   submitEditForm(): void {\n//     if (this.selectedAlarm) {\n//       const scrollPosition = window.pageYOffset;\n//       this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(\n//         (updatedAlarm: Alarm) => {\n//           const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n//           if (index !== -1) {\n//             this.alarms[index] = updatedAlarm;\n//           }\n//           console.log('Alarm updated successfully');\n//           alert('RECORD UPDATED');\n//           this.selectedAlarm = null;\n//           this.showEditForm = false;\n//           if (this.alarms.length > 0) {\n//             this.selectedAlarm = this.alarms[0];\n//           }\n//           window.scrollTo(0, scrollPosition); // Maintain scroll position\n//         },\n//         (error) => {\n//           console.error('Error updating alarm:', error);\n//         }\n//       );\n//     }\n//   }\n//   // cancelEdit(): void {\n//   //   // Check if any changes were made to the selected alarm\n//   //   if (this.selectedAlarm && this.originalAlarm) {\n//   //     const index = this.alarms.findIndex(a => a.id === this.selectedAlarm.id);\n//   //     if (index !== -1) {\n//   //       // If changes were made, revert back to the original state\n//   //       this.alarms[index] = { ...this.originalAlarm };\n//   //     }\n//   //   }\n//   //   this.selectedAlarm = null;\n//   //   this.originalAlarm = null;\n//   // }\n//   cancelEdit(): void {\n//     // Reset the original values of the selected alarm\n//     if (this.selectedAlarm && this.originalAlarm) {\n//       Object.assign(this.selectedAlarm, this.originalAlarm);\n//     }\n//     // Close the edit form\n//     this.showEditForm = false;\n//   }\n// openDeleteConfirmation(alarm: any): void {\n//   this.selectedAlarmForDelete = alarm;\n//   this.isDeleteConfirmationOpen = true; // Set isDeleteConfirmationOpen to true when opening the modal\n//   document.body.classList.add('freeze-background'); // Freeze the background\n// }\n// closeDeleteConfirmation(): void {\n//     this.isDeleteConfirmationOpen = false;\n//     document.body.classList.remove('freeze-background'); // Unfreeze the background\n// }\n// deleteAlarm(id: number): void {\n//   this.isDeleteConfirmationOpen = true;\n//   // Call the deleteAlarm method of your AlarmService\n//   this.AlarmService.deleteAlarm(id).subscribe(\n//     () => {\n//       // Remove the deleted alarm from the local array\n//       this.alarms = this.alarms.filter(a => a.id !== id);\n//       console.log('Alarm deleted successfully');\n//       alert('RECORD DELETED');\n//       // Close the delete confirmation modal\n//       if (this.alarms.length > 0) {\n//         this.selectedAlarm = this.alarms[0];\n//       } else {\n//         this.selectedAlarm = null;\n//       }\n//       this.closeDeleteConfirmation();\n//     },\n//     error => {\n//       console.error('Error deleting alarm:', error);\n//     }\n//   );\n// }\n// toggleFilterOptions(): void {\n//     this.showFilterOptions = !this.showFilterOptions;\n//   }\n//   filterByPriority(): void {\n//     if (this.selectedPriority) {\n//       this.alarms = this.alarms.filter(alarm => alarm.priority === this.selectedPriority);\n//     } else {\n//       // If no priority is selected, reset the alarms array to show all alarms\n//       this.loadAlarms();\n//     }\n//   }\n// }","map":{"version":3,"names":[],"sources":["D:\\AMBUJ\\AMBUJ\\COLLEGE\\GG\\alarm-demo-main\\Ang\\ui\\src\\app\\read\\read.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\n\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n\n//   constructor(private AlarmService: AlarmService) {}\n\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\n// import { Component, OnInit  } from '@angular/core';\n// import { Alarm } from '../app.model';\n// import { AlarmService } from '../data.service';\n\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n// export class AlarmComponent  implements OnInit {\n//   alarms: Alarm[] = []; // Initialize with an empty array\n//   selectedAlarm: Alarm | null = null; // Initialize selectedAlarm as null\n//   originalAlarm: Alarm | null = null; // Store the original state of the selected alarm\n//   showEditForm = false;\n//   freezeBackground = false; \n//   isDeleteConfirmationOpen: boolean = false;\n//   selectedAlarmForDelete: any;\n//   showFilterOptions: boolean = false;\n//   selectedPriority: string = '';\n//   hoveredAlarm: Alarm | null = null;\n\n//   constructor(private AlarmService: AlarmService) { }\n\n//   ngOnInit(): void {\n//     this.loadAlarms();\n//   }\n\n//   loadAlarms(): void {\n//     this.AlarmService.getAlarms().subscribe(\n//       (alarms: Alarm[]) => {\n//         this.alarms = alarms;\n//         console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n//       },\n//       (error) => {\n//         console.error('Error loading alarms:', error);\n//       }\n//     );\n//   }\n  \n\n//   editAlarm(alarm: Alarm): void {\n//     this.selectedAlarm = alarm;\n//     // this.showEditForm = false; // Close edit form when selecting a new alarm\n//     this.originalAlarm = { ...alarm };\n//   }\n//   onMouseEnter(alarm: Alarm): void {\n//     this.hoveredAlarm = alarm;\n//   }\n\n//   onMouseLeave(): void {\n//     this.hoveredAlarm = null;\n//   }\n\n//   toggleEditForm(): void {\n//     this.showEditForm = !this.showEditForm;\n//   }\n\n//   submitEditForm(): void {\n//     if (this.selectedAlarm) {\n//       const scrollPosition = window.pageYOffset;\n//       this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(\n//         (updatedAlarm: Alarm) => {\n//           const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n//           if (index !== -1) {\n//             this.alarms[index] = updatedAlarm;\n//           }\n//           console.log('Alarm updated successfully');\n//           alert('RECORD UPDATED');\n//           this.selectedAlarm = null;\n//           this.showEditForm = false;\n//           if (this.alarms.length > 0) {\n//             this.selectedAlarm = this.alarms[0];\n//           }\n//           window.scrollTo(0, scrollPosition); // Maintain scroll position\n//         },\n//         (error) => {\n//           console.error('Error updating alarm:', error);\n//         }\n//       );\n//     }\n//   }\n//   // cancelEdit(): void {\n//   //   // Check if any changes were made to the selected alarm\n//   //   if (this.selectedAlarm && this.originalAlarm) {\n//   //     const index = this.alarms.findIndex(a => a.id === this.selectedAlarm.id);\n//   //     if (index !== -1) {\n//   //       // If changes were made, revert back to the original state\n//   //       this.alarms[index] = { ...this.originalAlarm };\n//   //     }\n//   //   }\n//   //   this.selectedAlarm = null;\n//   //   this.originalAlarm = null;\n//   // }\n//   cancelEdit(): void {\n//     // Reset the original values of the selected alarm\n//     if (this.selectedAlarm && this.originalAlarm) {\n//       Object.assign(this.selectedAlarm, this.originalAlarm);\n//     }\n//     // Close the edit form\n//     this.showEditForm = false;\n//   }\n  \n  \n\n// openDeleteConfirmation(alarm: any): void {\n//   this.selectedAlarmForDelete = alarm;\n//   this.isDeleteConfirmationOpen = true; // Set isDeleteConfirmationOpen to true when opening the modal\n//   document.body.classList.add('freeze-background'); // Freeze the background\n// }\n\n// closeDeleteConfirmation(): void {\n//     this.isDeleteConfirmationOpen = false;\n//     document.body.classList.remove('freeze-background'); // Unfreeze the background\n// }\n\n// deleteAlarm(id: number): void {\n//   this.isDeleteConfirmationOpen = true;\n\n//   // Call the deleteAlarm method of your AlarmService\n//   this.AlarmService.deleteAlarm(id).subscribe(\n//     () => {\n//       // Remove the deleted alarm from the local array\n//       this.alarms = this.alarms.filter(a => a.id !== id);\n//       console.log('Alarm deleted successfully');\n//       alert('RECORD DELETED');\n//       // Close the delete confirmation modal\n//       if (this.alarms.length > 0) {\n//         this.selectedAlarm = this.alarms[0];\n//       } else {\n//         this.selectedAlarm = null;\n//       }\n//       this.closeDeleteConfirmation();\n   \n//     },\n//     error => {\n//       console.error('Error deleting alarm:', error);\n\n//     }\n//   );\n// }\n\n\n\n// toggleFilterOptions(): void {\n//     this.showFilterOptions = !this.showFilterOptions;\n//   }\n\n//   filterByPriority(): void {\n//     if (this.selectedPriority) {\n//       this.alarms = this.alarms.filter(alarm => alarm.priority === this.selectedPriority);\n//     } else {\n//       // If no priority is selected, reset the alarms array to show all alarms\n//       this.loadAlarms();\n//     }\n//   }\n// }\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}