{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n//   constructor(private AlarmService: AlarmService) {}\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component } from '@angular/core';\nlet AlarmComponent = class AlarmComponent {\n  constructor(AlarmService, renderer) {\n    this.AlarmService = AlarmService;\n    this.renderer = renderer;\n    this.alarms = []; // Initialize with an empty array\n    this.selectedAlarm = null; // Initialize selectedAlarm as null\n    this.originalAlarm = null; // Store the original state of the selected alarm\n    this.showEditForm = false;\n    this.freezeBackground = false;\n    this.isDeleteConfirmationOpen = false;\n    this.showFilterOptions = false;\n    this.selectedPriority = '';\n  }\n  ngOnInit() {\n    this.loadAlarms();\n  }\n  loadAlarms() {\n    this.AlarmService.getAlarms().subscribe(alarms => {\n      this.alarms = alarms;\n      console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n    }, error => {\n      console.error('Error loading alarms:', error);\n    });\n  }\n  editAlarm(alarm) {\n    this.selectedAlarm = alarm;\n    // this.showEditForm = false; // Close edit form when selecting a new alarm\n    this.originalAlarm = {\n      ...alarm\n    };\n  }\n  toggleEditForm() {\n    this.showEditForm = !this.showEditForm;\n  }\n  submitEditForm() {\n    if (this.selectedAlarm) {\n      const scrollPosition = window.pageYOffset;\n      this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(updatedAlarm => {\n        const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n        if (index !== -1) {\n          this.alarms[index] = updatedAlarm;\n        }\n        console.log('Alarm updated successfully');\n        alert('RECORD UPDATED');\n        this.selectedAlarm = null;\n        this.showEditForm = false;\n        if (this.alarms.length > 0) {\n          this.selectedAlarm = this.alarms[0];\n        }\n        window.scrollTo(0, scrollPosition); // Maintain scroll position\n      }, error => {\n        console.error('Error updating alarm:', error);\n      });\n    }\n  }\n  // cancelEdit(): void {\n  //   // Check if any changes were made to the selected alarm\n  //   if (this.selectedAlarm && this.originalAlarm) {\n  //     const index = this.alarms.findIndex(a => a.id === this.selectedAlarm.id);\n  //     if (index !== -1) {\n  //       // If changes were made, revert back to the original state\n  //       this.alarms[index] = { ...this.originalAlarm };\n  //     }\n  //   }\n  //   this.selectedAlarm = null;\n  //   this.originalAlarm = null;\n  // }\n  cancelEdit() {\n    // Reset the original values of the selected alarm\n    if (this.selectedAlarm && this.originalAlarm) {\n      Object.assign(this.selectedAlarm, this.originalAlarm);\n    }\n    // Close the edit form\n    this.showEditForm = false;\n  }\n  openDeleteConfirmation(alarm) {\n    this.selectedAlarmForDelete = alarm;\n    this.isDeleteConfirmationOpen = true; // Set isDeleteConfirmationOpen to true when opening the modal\n    document.body.classList.add('freeze-background'); // Freeze the background\n  }\n\n  closeDeleteConfirmation() {\n    this.isDeleteConfirmationOpen = false;\n    document.body.classList.remove('freeze-background'); // Unfreeze the background\n  }\n\n  deleteAlarm(id) {\n    this.isDeleteConfirmationOpen = true;\n    // Call the deleteAlarm method of your AlarmService\n    this.AlarmService.deleteAlarm(id).subscribe(() => {\n      // Remove the deleted alarm from the local array\n      this.alarms = this.alarms.filter(a => a.id !== id);\n      console.log('Alarm deleted successfully');\n      alert('RECORD DELETED');\n      // Close the delete confirmation modal\n      if (this.alarms.length > 0) {\n        this.selectedAlarm = this.alarms[0];\n      } else {\n        this.selectedAlarm = null;\n      }\n      this.closeDeleteConfirmation();\n    }, error => {\n      console.error('Error deleting alarm:', error);\n    });\n  }\n  toggleFilterOptions() {\n    this.showFilterOptions = !this.showFilterOptions;\n  }\n  filterByPriority() {\n    if (this.selectedPriority) {\n      this.alarms = this.alarms.filter(alarm => alarm.priority === this.selectedPriority);\n    } else {\n      // If no priority is selected, reset the alarms array to show all alarms\n      this.loadAlarms();\n    }\n  }\n};\nAlarmComponent = __decorate([Component({\n  selector: 'app-read',\n  templateUrl: './read.component.html',\n  styleUrls: ['./read.component.css']\n})], AlarmComponent);\nexport { AlarmComponent };","map":{"version":3,"names":["Component","AlarmComponent","constructor","AlarmService","renderer","alarms","selectedAlarm","originalAlarm","showEditForm","freezeBackground","isDeleteConfirmationOpen","showFilterOptions","selectedPriority","ngOnInit","loadAlarms","getAlarms","subscribe","console","log","error","editAlarm","alarm","toggleEditForm","submitEditForm","scrollPosition","window","pageYOffset","updateAlarm","updatedAlarm","index","findIndex","a","id","alert","length","scrollTo","cancelEdit","Object","assign","openDeleteConfirmation","selectedAlarmForDelete","document","body","classList","add","closeDeleteConfirmation","remove","deleteAlarm","filter","toggleFilterOptions","filterByPriority","priority","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\AMBUJ\\AMBUJ\\COLLEGE\\GG\\alarm-demo-main\\Ang\\ui\\src\\app\\read\\read.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\n\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n\n//   constructor(private AlarmService: AlarmService) {}\n\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component, OnInit } from '@angular/core';\nimport { Alarm } from '../app.model';\nimport { AlarmService } from '../data.service';\n\n@Component({\n  selector: 'app-read',\n  templateUrl: './read.component.html',\n  styleUrls: ['./read.component.css']\n})\nexport class AlarmComponent  implements OnInit {\n  alarms: Alarm[] = []; // Initialize with an empty array\n  selectedAlarm: Alarm | null = null; // Initialize selectedAlarm as null\n  originalAlarm: Alarm | null = null; // Store the original state of the selected alarm\n  showEditForm = false;\n  freezeBackground = false; \n  isDeleteConfirmationOpen: boolean = false;\n  selectedAlarmForDelete: any;\n  showFilterOptions: boolean = false;\n  selectedPriority: string = '';\n\n  constructor(private AlarmService: AlarmService,private renderer: Renderer2) { }\n\n  ngOnInit(): void {\n    this.loadAlarms();\n  }\n\n  loadAlarms(): void {\n    this.AlarmService.getAlarms().subscribe(\n      (alarms: Alarm[]) => {\n        this.alarms = alarms;\n        console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n      },\n      (error) => {\n        console.error('Error loading alarms:', error);\n      }\n    );\n  }\n  \n\n  editAlarm(alarm: Alarm): void {\n    this.selectedAlarm = alarm;\n    // this.showEditForm = false; // Close edit form when selecting a new alarm\n    this.originalAlarm = { ...alarm };\n  }\n\n  toggleEditForm(): void {\n    this.showEditForm = !this.showEditForm;\n  }\n\n  submitEditForm(): void {\n    if (this.selectedAlarm) {\n      const scrollPosition = window.pageYOffset;\n      this.AlarmService.updateAlarm(this.selectedAlarm).subscribe(\n        (updatedAlarm: Alarm) => {\n          const index = this.alarms.findIndex(a => a.id === updatedAlarm.id);\n          if (index !== -1) {\n            this.alarms[index] = updatedAlarm;\n          }\n          console.log('Alarm updated successfully');\n          alert('RECORD UPDATED');\n          this.selectedAlarm = null;\n          this.showEditForm = false;\n          if (this.alarms.length > 0) {\n            this.selectedAlarm = this.alarms[0];\n          }\n          window.scrollTo(0, scrollPosition); // Maintain scroll position\n        },\n        (error) => {\n          console.error('Error updating alarm:', error);\n        }\n      );\n    }\n  }\n  // cancelEdit(): void {\n  //   // Check if any changes were made to the selected alarm\n  //   if (this.selectedAlarm && this.originalAlarm) {\n  //     const index = this.alarms.findIndex(a => a.id === this.selectedAlarm.id);\n  //     if (index !== -1) {\n  //       // If changes were made, revert back to the original state\n  //       this.alarms[index] = { ...this.originalAlarm };\n  //     }\n  //   }\n  //   this.selectedAlarm = null;\n  //   this.originalAlarm = null;\n  // }\n  cancelEdit(): void {\n    // Reset the original values of the selected alarm\n    if (this.selectedAlarm && this.originalAlarm) {\n      Object.assign(this.selectedAlarm, this.originalAlarm);\n    }\n    // Close the edit form\n    this.showEditForm = false;\n  }\n  \n  \n\nopenDeleteConfirmation(alarm: any): void {\n  this.selectedAlarmForDelete = alarm;\n  this.isDeleteConfirmationOpen = true; // Set isDeleteConfirmationOpen to true when opening the modal\n  document.body.classList.add('freeze-background'); // Freeze the background\n}\n\ncloseDeleteConfirmation(): void {\n    this.isDeleteConfirmationOpen = false;\n    document.body.classList.remove('freeze-background'); // Unfreeze the background\n}\n\ndeleteAlarm(id: number): void {\n  this.isDeleteConfirmationOpen = true;\n\n  // Call the deleteAlarm method of your AlarmService\n  this.AlarmService.deleteAlarm(id).subscribe(\n    () => {\n      // Remove the deleted alarm from the local array\n      this.alarms = this.alarms.filter(a => a.id !== id);\n      console.log('Alarm deleted successfully');\n      alert('RECORD DELETED');\n      // Close the delete confirmation modal\n      if (this.alarms.length > 0) {\n        this.selectedAlarm = this.alarms[0];\n      } else {\n        this.selectedAlarm = null;\n      }\n      this.closeDeleteConfirmation();\n   \n    },\n    error => {\n      console.error('Error deleting alarm:', error);\n\n    }\n  );\n}\n\n\n\ntoggleFilterOptions(): void {\n    this.showFilterOptions = !this.showFilterOptions;\n  }\n\n  filterByPriority(): void {\n    if (this.selectedPriority) {\n      this.alarms = this.alarms.filter(alarm => alarm.priority === this.selectedPriority);\n    } else {\n      // If no priority is selected, reset the alarms array to show all alarms\n      this.loadAlarms();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}